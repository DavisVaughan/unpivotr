% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rectify.R
\name{rectify}
\alias{rectify}
\alias{print.cell_grid}
\title{Display cells as though in a spreadsheet}
\usage{
rectify(cells, ..., values = NULL)

\method{print}{cell_grid}(x, display = "terminal", ...)
}
\arguments{
\item{cells}{Data frame or tbl, the cells to be displayed.}

\item{...}{The columns of \code{cells} to use as the values of each cell.  Given
as bare variable names.  If you list more than one column, then the value
that is chosen for each cell will be the column that isn't \code{NA}.  You should
ensure that only one column isn't \code{NA} for each cell, otherwise the result
will be unpredictable.  Alternatively, use the \code{values} argument to
choose a column for each cell.}

\item{values}{The column of \code{cells} that names, for each cell, which
column to use for the value of the cell.  If this argument is given, then
\code{...} will be ignored.}

\item{display}{One of \code{"terminal"} (default), \code{"browser"}, \code{"rstudio"}.  To
display in the browser you must have the \code{DT} package installed.}
}
\description{
Takes the 'melted' output of \code{tidy_table()} or
\code{tidyxl::xlsx_cells()} (each row represents one cell) and projects the cells
into their original positions.  By default this prints to the
terminal/console, but with \code{display = "browser"} or \code{display = "rstudio"} it
will be displayed in the browser or the RStudio viewer pane.

This is for viewing only; the output is not designed to be used in other
functions.

Example: The following cells\preformatted{row col value
  1   1   "a"
  1   2   "b"
  2   1   "c"
  2   2   "d"
}

Would be presented as\preformatted{  1(A) 2(B)
1 "a"  "b"
2 "c"  "d"
}

The letters in the column names are for comparing this view with a
spreadsheet application.
}
\section{Methods (by generic)}{
\itemize{
\item \code{print}: S3 method for class \code{cell_grid}
}}

\examples{
x <- data.frame(row = c(1L, 1L, 2L, 2L),
                col = c(1L, 2L, 1L, 2L),
                value = letters[1:4])
x

# Typical usage is to choose a 'value' of the cell to represent in the grid
rectify(x, value)

# You can also show which row or which column each cell came from, which
# helps with understanding what this function does.
rectify(x, row)
rectify(x, col)

# If some cells have a character value, and others contain a numeric
# value, you can use both at once.  As long as no cell has a non-NA value in
# more than one of the columns you choose to represent in the grid, you'll be
# okay.
mtcars_tidy <- tidy_table(mtcars, TRUE, TRUE)
print(dplyr::arrange(mtcars_tidy, row, col), n = 20)
rectify(mtcars_tidy, dbl) # use only numeric values
rectify(mtcars_tidy, chr) # use only character values
rectify(mtcars_tidy, chr, dbl) # use both numeric and character values
rectify(mtcars_tidy, dbl, chr) # same as above

# This is what happens if cells have non-NA values in more than one of the
# colums you choose to represent in the grid.  Here, the row numbers are
# treated as cell values.  Every cell has a row number, which is what you see
# in the grid.  But the 'chr' column is also used, so non-NA values in the
# 'chr' column override the value from the 'row' column.  Currently the last
# column to be specified wins, but that behaviour is not guaranteed for
# future releases.
rectify(mtcars_tidy, row, chr)
rectify(mtcars_tidy, chr, row)

# Empty rows and columns up to the first occupied cell are dropped.
x$row <- x$row + 5
x$col <- x$col + 5
rectify(x, value)
#
# Print in the browser or in the RStudio viewer pane
\dontrun{
  y <- rectify(mtcars_tidy, chr, dbl)
  print(y, "browser")
  print(y, "rstudio")
}
}
