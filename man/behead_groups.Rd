% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/behead_groups.R
\name{behead_groups}
\alias{behead_groups}
\title{Behead multiple header groups}
\usage{
behead_groups(
  sheet = NULL,
  direction = "W",
  .groupings = groupings(fmt_alignment_indent),
  .hook_if = hook(any(FALSE)),
  .hook_if_rev = hook(any(FALSE)),
  default_col_header_direction = "N",
  default_row_header_direction = "W",
  header_fill = "local_format_id"
)
}
\arguments{
\item{sheet}{a tidyxl data frame.}

\item{direction}{a string indicating which type of headers are to be labeled. Options include compass direction or up/down/left/right.}

\item{.groupings}{expressions representing how header cells are differentiated. Most naturally works with fmt_* functions.}

\item{.hook_if}{expression determining whether directions are hooked.}

\item{.hook_if_rev}{expression determining whether directions are reverse hooked.}

\item{default_col_header_direction}{Indicates which direction is given to col headers by default. Only need if "NNW" is required, rather than "N".}

\item{default_row_header_direction}{Indicates which direction is given to row headers by default. Only need if "WNW" is required, rather than "W".}

\item{header_fill}{deals with merged cells. Fills in neighbouring cells if they have the same "local_format_id", "style" or are within "borders".}
}
\description{
Beheads multiple headers defined according to expressions in .groupings.
}
\examples{
print("todo")
 library(tidyverse)
# Read in tidyxl data frame
xl_df <-
  unpivotr_example("worked-examples.xlsx") \%>\%
  xlsx_cells_fmt(sheets = "pivot-hierarchy") \%>\%
  append_fmt(fmt_alignment_indent) 


# Add location annotations
xl_df <-
  xl_df \%>\%
  locate_data(data_type == "numeric") \%>\%
  behead_groups(direction = "W",
                .groupings = groupings(fmt_alignment_indent),
                .hook_if =     hook(any(fmt_alignment_indent == 0))) \%>\%
  behead(direction = "N", name = student)

# Extract data_cells
xl_df \%>\% attr("data_cells") \%>\% dplyr::select(.value:student)
}
